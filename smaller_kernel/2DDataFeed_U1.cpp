/**
 *  This file is automatically generated by PolySA CodeGen.
 *  Version: 1.0
 *  Authos: Jie Wang
 */

#include "common_header_U1.h"

void U1_Data0FeedData0(
  U1_Data0TransferChannelType buffer[U1_DATA0_FC_GROUP_FACTOR][U1_DATA0_BUF_SIZE/U1_DATA0_FC_SIMD_FACTOR],
  stream<U1_Data0PEChannelType> &fifo_feed_0,
  unsigned int initial_round
){
#pragma HLS INLINE off
  bool more_to_feed_to_sys_arr = true;

  ap_uint<5> c0_counter = 0;
  ap_uint<5> c1_counter = 0;
  ap_uint<3> c2_counter = 0;

  U1_Data0TransferChannelType tmp = buffer[0][0];
  unsigned int FILTER_S = tmp.FILTER_S;

  ap_uint<U1_DATA0_WIDTH*U1_SIMD_FACTOR> sel_tmp_0[U1_DATA0_FC_SIMD_FACTOR/U1_SIMD_FACTOR];
#pragma HLS ARRAY_PARTITION variable=sel_tmp_0 complete dim=1

  while(more_to_feed_to_sys_arr){
#pragma HLS PIPELINE II=1
    ap_uint<10> buffer_ind_to_feed_to_sys_arr;
    buffer_ind_to_feed_to_sys_arr = c1_counter * U1_K_T + c2_counter * U1_SIMD_FACTOR;

    unsigned int wide_index = buffer_ind_to_feed_to_sys_arr / U1_DATA0_FC_SIMD_FACTOR;
    unsigned int wide_offset = buffer_ind_to_feed_to_sys_arr % U1_DATA0_FC_SIMD_FACTOR;

    U1_Data0TransferChannelType buf_data_0 = buffer[0][wide_index];
    ap_uint<U1_DATA0_WIDTH*U1_DATA0_FC_SIMD_FACTOR> wide_data_0 = buf_data_0.data;
    ap_uint<U1_DATA0_WIDTH*U1_SIMD_FACTOR> data_to_feed_0;
    for (int s = 0; s < U1_DATA0_FC_SIMD_FACTOR/U1_SIMD_FACTOR; s++){
#pragma HLS UNROLL
      sel_tmp_0[s] = wide_data_0(U1_DATA0_WIDTH*U1_SIMD_FACTOR-1, 0);
      wide_data_0 = wide_data_0 >> (U1_DATA0_WIDTH*U1_SIMD_FACTOR);
    }
    data_to_feed_0 = sel_tmp_0[wide_offset / U1_SIMD_FACTOR];

    U1_Data0PEChannelType fifo_data_to_feed_0;
    fifo_data_to_feed_0 = U1_Data0PEChannelType(data_to_feed_0, buf_data_0.new_pair, buf_data_0.last_pair, buf_data_0.FILTER_S);
    fifo_feed_0.write(fifo_data_to_feed_0);

    // counter logic
    c0_counter++;
    if (c0_counter == 16){
      c0_counter = 0;
      c1_counter++;
      if (c1_counter == 16){
        c1_counter = 0;
        c2_counter++;
        if (c2_counter == 4){
          c2_counter = 0;
          more_to_feed_to_sys_arr = false;
        }
      }
    }
  }
}

void U1_Data1FeedData0(
  U1_Data1TransferChannelType buffer[U1_DATA1_FC_GROUP_FACTOR][U1_DATA1_BUF_SIZE/U1_DATA1_FC_SIMD_FACTOR],
  stream<U1_Data1PEChannelType> &fifo_feed_0,
  unsigned int initial_round
){
#pragma HLS INLINE off
  bool more_to_feed_to_sys_arr = true;

  ap_uint<5> c0_counter = 0;
  ap_uint<5> c1_counter = 0;
  ap_uint<3> c2_counter = 0;

  U1_Data1TransferChannelType tmp = buffer[0][0];
  unsigned int FILTER_S = tmp.FILTER_S;

  ap_uint<U1_DATA1_WIDTH*U1_SIMD_FACTOR> sel_tmp_0[U1_DATA1_FC_SIMD_FACTOR/U1_SIMD_FACTOR];
#pragma HLS ARRAY_PARTITION variable=sel_tmp_0 complete dim=1

  while(more_to_feed_to_sys_arr){
#pragma HLS PIPELINE II=1
    ap_uint<10> buffer_ind_to_feed_to_sys_arr;
    buffer_ind_to_feed_to_sys_arr = c0_counter * U1_K_T + c2_counter * U1_SIMD_FACTOR;

    unsigned int wide_index = buffer_ind_to_feed_to_sys_arr / U1_DATA1_FC_SIMD_FACTOR;
    unsigned int wide_offset = buffer_ind_to_feed_to_sys_arr % U1_DATA1_FC_SIMD_FACTOR;

    U1_Data1TransferChannelType buf_data_0 = buffer[0][wide_index];
    ap_uint<U1_DATA1_WIDTH*U1_DATA1_FC_SIMD_FACTOR> wide_data_0 = buf_data_0.data;
    ap_uint<U1_DATA1_WIDTH*U1_SIMD_FACTOR> data_to_feed_0;
    for (int s = 0; s < U1_DATA1_FC_SIMD_FACTOR/U1_SIMD_FACTOR; s++){
#pragma HLS UNROLL
      sel_tmp_0[s] = wide_data_0(U1_DATA1_WIDTH*U1_SIMD_FACTOR-1, 0);
      wide_data_0 = wide_data_0 >> (U1_DATA1_WIDTH*U1_SIMD_FACTOR);
    }
    data_to_feed_0 = sel_tmp_0[wide_offset / U1_SIMD_FACTOR];

    U1_Data1PEChannelType fifo_data_to_feed_0;
    fifo_data_to_feed_0 = U1_Data1PEChannelType(data_to_feed_0, buf_data_0.new_pair, buf_data_0.last_pair, buf_data_0.FILTER_S);
    fifo_feed_0.write(fifo_data_to_feed_0);

    // counter logic
    c0_counter++;
    if (c0_counter == 16){
      c0_counter = 0;
      c1_counter++;
      if (c1_counter == 16){
        c1_counter = 0;
        c2_counter++;
        if (c2_counter == 4){
          c2_counter = 0;
          more_to_feed_to_sys_arr = false;
        }
      }
    }
  }
}

void U1_Data0ReadData0(
  U1_Data0TransferChannelType buffer[U1_DATA0_FC_GROUP_FACTOR][U1_DATA0_BUF_SIZE / U1_DATA0_FC_SIMD_FACTOR],
  stream<U1_Data0TransferChannelType> &fifo_transfer_in,
  stream<U1_Data0TransferChannelType> &fifo_transfer_out,
  unsigned int engine_id,
  bool en
){
#pragma HLS INLINE off
  bool LAST_ENGINE = (engine_id == 2 / U1_DATA0_FC_SPLIT_FACTOR - 1);
  ap_uint<8> transfer_counter = 0;
  ap_uint<8> data0_buf_size;
  ap_uint<8> local_transfer_size;
  bool more_to_write_to_buffer = true;
  bool more_to_feed_to_sys_arr = false;
  bool more_to_forward = true;
  ap_uint<7> buffer_write_counter = 0;
  ap_uint<1> buffer_gs_id = 0;

  // the first read
  unsigned int FILTER_S = 1;
  data0_buf_size = 512 / U1_DATA0_FC_SIMD_FACTOR;
  local_transfer_size = data0_buf_size * (2 / U1_DATA0_FC_SPLIT_FACTOR - engine_id) * U1_DATA0_FC_GROUP_FACTOR;

  while(more_to_forward && en){
#pragma HLS PIPELINE II=1
    U1_Data0TransferChannelType data_read_from_fifo = fifo_transfer_in.read();
    bool data_is_to_buffer;
    bool data_is_to_forward;
    unsigned int feeder_id = data_read_from_fifo.feeder_id;
    data_is_to_buffer = LAST_ENGINE || (!LAST_ENGINE && feeder_id == engine_id);
    data_is_to_forward = !LAST_ENGINE && (feeder_id != engine_id);
    if (!LAST_ENGINE){
      if (data_is_to_forward){
        fifo_transfer_out.write(data_read_from_fifo);
      }
    }
    ap_uint<7> buffer_ind_to_write_to_buffer = buffer_write_counter;

    if (data_is_to_buffer){
      buffer[buffer_gs_id][buffer_ind_to_write_to_buffer] = data_read_from_fifo;
      buffer_write_counter++;
      if (buffer_write_counter == data0_buf_size){
        buffer_write_counter = 0;
        buffer_gs_id++;
        if (buffer_gs_id == U1_DATA0_FC_GROUP_FACTOR){
          buffer_gs_id = 0;
          more_to_write_to_buffer = false;
        }
      }
    }
    transfer_counter++;
    if (transfer_counter == local_transfer_size){
      transfer_counter = 0;
      more_to_forward = false;
    }
  }

}

void U1_Data0ReadDataLast(
  U1_Data0TransferChannelType buffer[U1_DATA0_FC_GROUP_FACTOR][U1_DATA0_BUF_SIZE / U1_DATA0_FC_SIMD_FACTOR],
  stream<U1_Data0TransferChannelType> &fifo_transfer_in,
  unsigned int engine_id,
  bool en
){
#pragma HLS INLINE off
  bool LAST_ENGINE = (engine_id == 2 / U1_DATA0_FC_SPLIT_FACTOR - 1);
  bool buffer_id_to_write_to_buffer = 0;
  bool buffer_id_to_feed_to_sys_arr = 1;
  ap_uint<8> transfer_counter = 0;
  ap_uint<8> data0_buf_size;
  ap_uint<8> local_transfer_size;
  bool more_to_write_to_buffer = true;
  bool more_to_feed_to_sys_arr = false;
  bool more_to_forward = true;
  ap_uint<7> buffer_write_counter = 0;
  ap_uint<1> buffer_gs_id = 0;

  // the first read
  unsigned int FILTER_S = 1;
  data0_buf_size = 512 / U1_DATA0_FC_SIMD_FACTOR;
  local_transfer_size = data0_buf_size * (2 / U1_DATA0_FC_SPLIT_FACTOR - engine_id) * U1_DATA0_FC_GROUP_FACTOR;

  while(more_to_forward && en){
#pragma HLS PIPELINE II=1
    U1_Data0TransferChannelType data_read_from_fifo = fifo_transfer_in.read();
    bool data_is_to_buffer;
    bool data_is_to_forward;
    unsigned int feeder_id = data_read_from_fifo.feeder_id;
    data_is_to_buffer = LAST_ENGINE || (!LAST_ENGINE && feeder_id == engine_id);
    data_is_to_forward = !LAST_ENGINE && (feeder_id != engine_id);
    ap_uint<7> buffer_ind_to_write_to_buffer = buffer_write_counter;

    if (data_is_to_buffer){
      buffer[buffer_gs_id][buffer_ind_to_write_to_buffer] = data_read_from_fifo;
      buffer_write_counter++;
      if (buffer_write_counter == data0_buf_size){
        buffer_write_counter = 0;
        buffer_gs_id++;
        if (buffer_gs_id == U1_DATA0_FC_GROUP_FACTOR){
          buffer_gs_id = 0;
          more_to_write_to_buffer = false;
        }
      }
    }
    transfer_counter++;
    if (transfer_counter == local_transfer_size){
      transfer_counter = 0;
      more_to_forward = false;
    }
  }

}

void U1_Data1ReadData0(
  U1_Data1TransferChannelType buffer[U1_DATA1_FC_GROUP_FACTOR][U1_DATA1_BUF_SIZE / U1_DATA1_FC_SIMD_FACTOR],
  stream<U1_Data1TransferChannelType> &fifo_transfer_in,
  stream<U1_Data1TransferChannelType> &fifo_transfer_out,
  unsigned int engine_id,
  bool en
){
#pragma HLS INLINE off
  bool LAST_ENGINE = (engine_id == 2 / U1_DATA1_FC_SPLIT_FACTOR - 1);
  ap_uint<8> transfer_counter = 0;
  ap_uint<8> data1_buf_size;
  ap_uint<8> local_transfer_size;
  bool more_to_write_to_buffer = true;
  bool more_to_feed_to_sys_arr = false;
  bool more_to_forward = true;
  ap_uint<7> buffer_write_counter = 0;
  ap_uint<1> buffer_gs_id = 0;

  // the first read
  unsigned int FILTER_S = 1;
  data1_buf_size = 512 / U1_DATA1_FC_SIMD_FACTOR;
  local_transfer_size = data1_buf_size * (2 / U1_DATA1_FC_SPLIT_FACTOR - engine_id) * U1_DATA1_FC_GROUP_FACTOR;

  while(more_to_forward && en){
#pragma HLS PIPELINE II=1
    U1_Data1TransferChannelType data_read_from_fifo = fifo_transfer_in.read();
    bool data_is_to_buffer;
    bool data_is_to_forward;
    unsigned int feeder_id = data_read_from_fifo.feeder_id;
    data_is_to_buffer = LAST_ENGINE || (!LAST_ENGINE && feeder_id == engine_id);
    data_is_to_forward = !LAST_ENGINE && (feeder_id != engine_id);
    if (!LAST_ENGINE){
      if (data_is_to_forward){
        fifo_transfer_out.write(data_read_from_fifo);
      }
    }
    ap_uint<7> buffer_ind_to_write_to_buffer = buffer_write_counter;

    if (data_is_to_buffer){
      buffer[buffer_gs_id][buffer_ind_to_write_to_buffer] = data_read_from_fifo;
      buffer_write_counter++;
      if (buffer_write_counter == data1_buf_size){
        buffer_write_counter = 0;
        buffer_gs_id++;
        if (buffer_gs_id == U1_DATA1_FC_GROUP_FACTOR){
          buffer_gs_id = 0;
          more_to_write_to_buffer = false;
        }
      }
    }
    transfer_counter++;
    if (transfer_counter == local_transfer_size){
      transfer_counter = 0;
      more_to_forward = false;
    }
  }

}

void U1_Data1ReadDataLast(
  U1_Data1TransferChannelType buffer[U1_DATA1_FC_GROUP_FACTOR][U1_DATA1_BUF_SIZE / U1_DATA1_FC_SIMD_FACTOR],
  stream<U1_Data1TransferChannelType> &fifo_transfer_in,
  unsigned int engine_id,
  bool en
){
#pragma HLS INLINE off
  bool LAST_ENGINE = (engine_id == 2 / U1_DATA1_FC_SPLIT_FACTOR - 1);
  bool buffer_id_to_write_to_buffer = 0;
  bool buffer_id_to_feed_to_sys_arr = 1;
  ap_uint<8> transfer_counter = 0;
  ap_uint<8> data1_buf_size;
  ap_uint<8> local_transfer_size;
  bool more_to_write_to_buffer = true;
  bool more_to_feed_to_sys_arr = false;
  bool more_to_forward = true;
  ap_uint<7> buffer_write_counter = 0;
  ap_uint<1> buffer_gs_id = 0;

  // the first read
  unsigned int FILTER_S = 1;
  data1_buf_size = 512 / U1_DATA1_FC_SIMD_FACTOR;
  local_transfer_size = data1_buf_size * (2 / U1_DATA1_FC_SPLIT_FACTOR - engine_id) * U1_DATA1_FC_GROUP_FACTOR;

  while(more_to_forward && en){
#pragma HLS PIPELINE II=1
    U1_Data1TransferChannelType data_read_from_fifo = fifo_transfer_in.read();
    bool data_is_to_buffer;
    bool data_is_to_forward;
    unsigned int feeder_id = data_read_from_fifo.feeder_id;
    data_is_to_buffer = LAST_ENGINE || (!LAST_ENGINE && feeder_id == engine_id);
    data_is_to_forward = !LAST_ENGINE && (feeder_id != engine_id);
    ap_uint<7> buffer_ind_to_write_to_buffer = buffer_write_counter;

    if (data_is_to_buffer){
      buffer[buffer_gs_id][buffer_ind_to_write_to_buffer] = data_read_from_fifo;
      buffer_write_counter++;
      if (buffer_write_counter == data1_buf_size){
        buffer_write_counter = 0;
        buffer_gs_id++;
        if (buffer_gs_id == U1_DATA1_FC_GROUP_FACTOR){
          buffer_gs_id = 0;
          more_to_write_to_buffer = false;
        }
      }
    }
    transfer_counter++;
    if (transfer_counter == local_transfer_size){
      transfer_counter = 0;
      more_to_forward = false;
    }
  }

}

void U1_DataFeed0Engine0(
  stream<U1_Data0TransferChannelType> &fifo_transfer_in,
  stream<U1_Data0TransferChannelType> &fifo_transfer_out,
  stream<U1_Data0PEChannelType> &fifo_feed_0,
  unsigned int engine_id
){
#pragma HLS DATA_PACK variable=fifo_transfer_in
#pragma HLS DATA_PACK variable=fifo_transfer_out
#pragma HLS DATA_PACK variable=fifo_feed_0
#pragma HLS INLINE off

  U1_Data0TransferChannelType ping_buffer[U1_DATA0_FC_GROUP_FACTOR][U1_DATA0_BUF_SIZE / U1_DATA0_FC_SIMD_FACTOR];
  U1_Data0TransferChannelType pong_buffer[U1_DATA0_FC_GROUP_FACTOR][U1_DATA0_BUF_SIZE / U1_DATA0_FC_SIMD_FACTOR];
#pragma HLS RESOURCE variable=ping_buffer core=RAM_2P_BRAM
#pragma HLS RESOURCE variable=pong_buffer core=RAM_2P_BRAM
#pragma HLS DATA_PACK variable=ping_buffer
#pragma HLS DATA_PACK variable=pong_buffer
#pragma HLS ARRAY_PARTITION variable=ping_buffer dim=1 complete
#pragma HLS ARRAY_PARTITION variable=pong_buffer dim=1 complete


  unsigned int initial_round = 0;

  U1_Data0ReadData0(ping_buffer, fifo_transfer_in, fifo_transfer_out, engine_id, 1);
  initial_round++;

  for (ap_uint<6> i_t = 0; i_t < 32; i_t += 32)
    for (ap_uint<6> j_t = 0; j_t < 32; j_t += 32)
      for (ap_uint<6> k_t = 0; k_t < 32; k_t += 32)
      {
        bool last_patch = (k_t == U1_K - U1_K_T) && (i_t == U1_I - U1_I_T) && (j_t == U1_J - U1_J_T);
        if (initial_round % 2 == 1){
          U1_Data0ReadData0(pong_buffer, fifo_transfer_in, fifo_transfer_out, engine_id, !last_patch);
          U1_Data0FeedData0(
            ping_buffer,
            fifo_feed_0,
            initial_round);
        } else {
          U1_Data0ReadData0(ping_buffer, fifo_transfer_in, fifo_transfer_out, engine_id, !last_patch);
          U1_Data0FeedData0(
            pong_buffer,
            fifo_feed_0,
            initial_round);
        }
        initial_round++;
      }

}

void U1_DataFeed0Engine0_wrapper(
  stream<U1_Data0TransferChannelType> &fifo_transfer_in,
  stream<U1_Data0TransferChannelType> &fifo_transfer_out,
  stream<U1_Data0PEChannelType> &fifo_feed_0,
  unsigned int engine_id
){
  U1_DataFeed0Engine0(
    fifo_transfer_in,
    fifo_transfer_out, 
    fifo_feed_0,
    engine_id);
}

void U1_DataFeed0EngineLast(
  stream<U1_Data0TransferChannelType> &fifo_transfer_in,
  stream<U1_Data0PEChannelType> &fifo_feed_0,
  unsigned int engine_id
){
#pragma HLS DATA_PACK variable=fifo_transfer_in
#pragma HLS DATA_PACK variable=fifo_feed_0
#pragma HLS INLINE off

  U1_Data0TransferChannelType ping_buffer[U1_DATA0_FC_GROUP_FACTOR][U1_DATA0_BUF_SIZE / U1_DATA0_FC_SIMD_FACTOR];
  U1_Data0TransferChannelType pong_buffer[U1_DATA0_FC_GROUP_FACTOR][U1_DATA0_BUF_SIZE / U1_DATA0_FC_SIMD_FACTOR];
#pragma HLS RESOURCE variable=ping_buffer core=RAM_2P_BRAM
#pragma HLS RESOURCE variable=pong_buffer core=RAM_2P_BRAM
#pragma HLS DATA_PACK variable=ping_buffer
#pragma HLS DATA_PACK variable=pong_buffer
#pragma HLS ARRAY_PARTITION variable=ping_buffer dim=1 complete
#pragma HLS ARRAY_PARTITION variable=pong_buffer dim=1 complete


  unsigned int initial_round = 0;

  U1_Data0ReadDataLast(ping_buffer, fifo_transfer_in, engine_id, 1);
  initial_round++;

  for (ap_uint<6> i_t = 0; i_t < 32; i_t += 32)
    for (ap_uint<6> j_t = 0; j_t < 32; j_t += 32)
      for (ap_uint<6> k_t = 0; k_t < 32; k_t += 32)
      {
        bool last_patch = (k_t == U1_K - U1_K_T) && (i_t == U1_I - U1_I_T) && (j_t == U1_J - U1_J_T);
        if (initial_round % 2 == 1){
          U1_Data0ReadDataLast(pong_buffer, fifo_transfer_in, engine_id, !last_patch);
          U1_Data0FeedData0(
            ping_buffer,
            fifo_feed_0,
            initial_round);
        } else {
          U1_Data0ReadDataLast(ping_buffer, fifo_transfer_in, engine_id, !last_patch);
          U1_Data0FeedData0(
            pong_buffer,
            fifo_feed_0,
            initial_round);
        }
        initial_round++;
      }

}

void U1_DataFeed1Engine0(
  stream<U1_Data1TransferChannelType> &fifo_transfer_in,
  stream<U1_Data1TransferChannelType> &fifo_transfer_out,
  stream<U1_Data1PEChannelType> &fifo_feed_0,
  unsigned int engine_id
){
#pragma HLS DATA_PACK variable=fifo_transfer_in
#pragma HLS DATA_PACK variable=fifo_transfer_out
#pragma HLS DATA_PACK variable=fifo_feed_0
#pragma HLS INLINE off

  U1_Data1TransferChannelType ping_buffer[U1_DATA1_FC_GROUP_FACTOR][U1_DATA1_BUF_SIZE / U1_DATA1_FC_SIMD_FACTOR];
  U1_Data1TransferChannelType pong_buffer[U1_DATA1_FC_GROUP_FACTOR][U1_DATA1_BUF_SIZE / U1_DATA1_FC_SIMD_FACTOR];
#pragma HLS RESOURCE variable=ping_buffer core=RAM_2P_BRAM
#pragma HLS RESOURCE variable=pong_buffer core=RAM_2P_BRAM
#pragma HLS DATA_PACK variable=ping_buffer
#pragma HLS DATA_PACK variable=pong_buffer
#pragma HLS ARRAY_PARTITION variable=ping_buffer dim=1 complete
#pragma HLS ARRAY_PARTITION variable=pong_buffer dim=1 complete


  unsigned int initial_round = 0;

  U1_Data1ReadData0(ping_buffer, fifo_transfer_in, fifo_transfer_out, engine_id, 1);
  initial_round++;

  for (ap_uint<6> i_t = 0; i_t < 32; i_t += 32)
    for (ap_uint<6> j_t = 0; j_t < 32; j_t += 32)
      for (ap_uint<6> k_t = 0; k_t < 32; k_t += 32)
      {
        bool last_patch = (k_t == U1_K - U1_K_T) && (i_t == U1_I - U1_I_T) && (j_t == U1_J - U1_J_T);
        if (initial_round % 2 == 1){
          U1_Data1ReadData0(pong_buffer, fifo_transfer_in, fifo_transfer_out, engine_id, !last_patch);
          U1_Data1FeedData0(
            ping_buffer,
            fifo_feed_0,
            initial_round);
        } else {
          U1_Data1ReadData0(ping_buffer, fifo_transfer_in, fifo_transfer_out, engine_id, !last_patch);
          U1_Data1FeedData0(
            pong_buffer,
            fifo_feed_0,
            initial_round);
        }
        initial_round++;
      }

}

void U1_DataFeed1Engine0_wrapper(
  stream<U1_Data1TransferChannelType> &fifo_transfer_in,
  stream<U1_Data1TransferChannelType> &fifo_transfer_out,
  stream<U1_Data1PEChannelType> &fifo_feed_0,
  unsigned int engine_id
){
  U1_DataFeed1Engine0(
    fifo_transfer_in,
    fifo_transfer_out, 
    fifo_feed_0,
    engine_id);
}

void U1_DataFeed1EngineLast(
  stream<U1_Data1TransferChannelType> &fifo_transfer_in,
  stream<U1_Data1PEChannelType> &fifo_feed_0,
  unsigned int engine_id
){
#pragma HLS DATA_PACK variable=fifo_transfer_in
#pragma HLS DATA_PACK variable=fifo_feed_0
#pragma HLS INLINE off

  U1_Data1TransferChannelType ping_buffer[U1_DATA1_FC_GROUP_FACTOR][U1_DATA1_BUF_SIZE / U1_DATA1_FC_SIMD_FACTOR];
  U1_Data1TransferChannelType pong_buffer[U1_DATA1_FC_GROUP_FACTOR][U1_DATA1_BUF_SIZE / U1_DATA1_FC_SIMD_FACTOR];
#pragma HLS RESOURCE variable=ping_buffer core=RAM_2P_BRAM
#pragma HLS RESOURCE variable=pong_buffer core=RAM_2P_BRAM
#pragma HLS DATA_PACK variable=ping_buffer
#pragma HLS DATA_PACK variable=pong_buffer
#pragma HLS ARRAY_PARTITION variable=ping_buffer dim=1 complete
#pragma HLS ARRAY_PARTITION variable=pong_buffer dim=1 complete


  unsigned int initial_round = 0;

  U1_Data1ReadDataLast(ping_buffer, fifo_transfer_in, engine_id, 1);
  initial_round++;

  for (ap_uint<6> i_t = 0; i_t < 32; i_t += 32)
    for (ap_uint<6> j_t = 0; j_t < 32; j_t += 32)
      for (ap_uint<6> k_t = 0; k_t < 32; k_t += 32)
      {
        bool last_patch = (k_t == U1_K - U1_K_T) && (i_t == U1_I - U1_I_T) && (j_t == U1_J - U1_J_T);
        if (initial_round % 2 == 1){
          U1_Data1ReadDataLast(pong_buffer, fifo_transfer_in, engine_id, !last_patch);
          U1_Data1FeedData0(
            ping_buffer,
            fifo_feed_0,
            initial_round);
        } else {
          U1_Data1ReadDataLast(ping_buffer, fifo_transfer_in, engine_id, !last_patch);
          U1_Data1FeedData0(
            pong_buffer,
            fifo_feed_0,
            initial_round);
        }
        initial_round++;
      }

}

